
F103_SPI_DMA_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f84  08003f84  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f84  08003f84  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000009c  08004028  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004028  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a28d  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d19  00000000  00000000  0002a352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  0002c070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  0002cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013dbf  00000000  00000000  0002d408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a6c  00000000  00000000  000411c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071683  00000000  00000000  00049c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb2b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000bb334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee0 	.word	0x08003ee0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08003ee0 	.word	0x08003ee0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcb7 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f85f 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f97d 	bl	8000458 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f955 	bl	800040c <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f8b5 	bl	80002d0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000166:	f000 f8f1 	bl	800034c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f925 	bl	80003b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK){
 800016e:	4824      	ldr	r0, [pc, #144]	; (8000200 <main+0xb4>)
 8000170:	f000 fe04 	bl	8000d7c <HAL_ADC_Start_IT>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d001      	beq.n	800017e <main+0x32>
	   Error_Handler();
 800017a:	f000 fa39 	bl	80005f0 <Error_Handler>
  }
  for(volatile uint8_t i=0;i<16;i++)
 800017e:	2300      	movs	r3, #0
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	e011      	b.n	80001a8 <main+0x5c>
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000188:	481e      	ldr	r0, [pc, #120]	; (8000204 <main+0xb8>)
 800018a:	f001 fdf7 	bl	8001d7c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000192:	481d      	ldr	r0, [pc, #116]	; (8000208 <main+0xbc>)
 8000194:	f001 fdf2 	bl	8001d7c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000198:	2064      	movs	r0, #100	; 0x64
 800019a:	f000 fcf5 	bl	8000b88 <HAL_Delay>
  for(volatile uint8_t i=0;i<16;i++)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	3301      	adds	r3, #1
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d9e9      	bls.n	8000184 <main+0x38>
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b6:	4813      	ldr	r0, [pc, #76]	; (8000204 <main+0xb8>)
 80001b8:	f001 fdc8 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4811      	ldr	r0, [pc, #68]	; (8000208 <main+0xbc>)
 80001c4:	f001 fdc2 	bl	8001d4c <HAL_GPIO_WritePin>

  /* CLK sinyalinin düzgün şekilde aşağı çekilmesi için SPI gönderme / alma işlevlerini çağırmadan önce SPI bloğu etkinleştirilir.
        Aksi takdirde, SPI CLK sinyali bu kartta temiz değildir ve aktarım sırasında hatalara neden olur */

  __HAL_SPI_ENABLE(&hspi2);
 80001c8:	4b10      	ldr	r3, [pc, #64]	; (800020c <main+0xc0>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <main+0xc0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80001d6:	601a      	str	r2, [r3, #0]

  if(HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 43) != HAL_OK)
 80001d8:	232b      	movs	r3, #43	; 0x2b
 80001da:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <main+0xc4>)
 80001dc:	490d      	ldr	r1, [pc, #52]	; (8000214 <main+0xc8>)
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <main+0xc0>)
 80001e0:	f002 fb18 	bl	8002814 <HAL_SPI_TransmitReceive_DMA>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <main+0xa2>
  {
    Error_Handler();
 80001ea:	f000 fa01 	bl	80005f0 <Error_Handler>
  }

  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80001ee:	bf00      	nop
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0xc0>)
 80001f2:	f002 fd14 	bl	8002c1e <HAL_SPI_GetState>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d1f9      	bne.n	80001f0 <main+0xa4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0xb0>
 80001fe:	bf00      	nop
 8000200:	20000164 	.word	0x20000164
 8000204:	40010c00 	.word	0x40010c00
 8000208:	40011000 	.word	0x40011000
 800020c:	200000c8 	.word	0x200000c8
 8000210:	200001d4 	.word	0x200001d4
 8000214:	20000000 	.word	0x20000000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	; 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fa40 	bl	80036ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd9c 	bl	8001dac <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f9b9 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f806 	bl	80022ac <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f9a3 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002aa:	2302      	movs	r3, #2
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 f994 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002c2:	f000 f995 	bl	80005f0 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3750      	adds	r7, #80	; 0x50
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_ADC1_Init+0x74>)
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <MX_ADC1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_ADC1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_ADC1_Init+0x74>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_ADC1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_ADC1_Init+0x74>)
 80002fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_ADC1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_ADC1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <MX_ADC1_Init+0x74>)
 800030e:	f000 fc5d 	bl	8000bcc <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000318:	f000 f96a 	bl	80005f0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800031c:	2301      	movs	r3, #1
 800031e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000324:	2303      	movs	r3, #3
 8000326:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_ADC1_Init+0x74>)
 800032e:	f000 feb3 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000338:	f000 f95a 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000164 	.word	0x20000164
 8000348:	40012400 	.word	0x40012400

0800034c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000352:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <MX_SPI2_Init+0x68>)
 8000354:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_SPI2_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_SPI2_Init+0x64>)
 800036a:	2202      	movs	r2, #2
 800036c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800037a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_SPI2_Init+0x64>)
 800037e:	2230      	movs	r2, #48	; 0x30
 8000380:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_SPI2_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000396:	220a      	movs	r2, #10
 8000398:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_SPI2_Init+0x64>)
 800039c:	f002 f9d8 	bl	8002750 <HAL_SPI_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80003a6:	f000 f923 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000c8 	.word	0x200000c8
 80003b4:	40003800 	.word	0x40003800

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003f0:	f002 fdd4 	bl	8002f9c <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f8f9 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000194 	.word	0x20000194
 8000408:	40013800 	.word	0x40013800

0800040c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_DMA_Init+0x48>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <MX_DMA_Init+0x48>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_DMA_Init+0x48>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2103      	movs	r1, #3
 800042e:	200e      	movs	r0, #14
 8000430:	f001 f897 	bl	8001562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000434:	200e      	movs	r0, #14
 8000436:	f001 f8b0 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2103      	movs	r1, #3
 800043e:	200f      	movs	r0, #15
 8000440:	f001 f88f 	bl	8001562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000444:	200f      	movs	r0, #15
 8000446:	f001 f8a8 	bl	800159a <HAL_NVIC_EnableIRQ>

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <MX_GPIO_Init+0xd0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <MX_GPIO_Init+0xd0>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_GPIO_Init+0xd0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <MX_GPIO_Init+0xd0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a27      	ldr	r2, [pc, #156]	; (8000528 <MX_GPIO_Init+0xd0>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b25      	ldr	r3, [pc, #148]	; (8000528 <MX_GPIO_Init+0xd0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b22      	ldr	r3, [pc, #136]	; (8000528 <MX_GPIO_Init+0xd0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a21      	ldr	r2, [pc, #132]	; (8000528 <MX_GPIO_Init+0xd0>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_GPIO_Init+0xd0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_GPIO_Init+0xd0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1b      	ldr	r2, [pc, #108]	; (8000528 <MX_GPIO_Init+0xd0>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_GPIO_Init+0xd0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	4816      	ldr	r0, [pc, #88]	; (800052c <MX_GPIO_Init+0xd4>)
 80004d4:	f001 fc3a 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <MX_GPIO_Init+0xd8>)
 80004e0:	f001 fc34 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <MX_GPIO_Init+0xd4>)
 80004fe:	f001 facb 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2302      	movs	r3, #2
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_GPIO_Init+0xd8>)
 800051c:	f001 fabc 	bl	8001a98 <HAL_GPIO_Init>

}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	40011000 	.word	0x40011000
 8000530:	40010c00 	.word	0x40010c00

08000534 <HAL_ADC_ConvCpltCallback>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
}
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
//	  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK){
//		   Error_Handler();
//	  }
	 ADCValue = HAL_ADC_GetValue(&hadc1);
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <HAL_ADC_ConvCpltCallback+0x1c>)
 800053e:	f000 fcd3 	bl	8000ee8 <HAL_ADC_GetValue>
 8000542:	4602      	mov	r2, r0
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_ADC_ConvCpltCallback+0x20>)
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000164 	.word	0x20000164
 8000554:	200000b8 	.word	0x200000b8

08000558 <HAL_SPI_TxRxCpltCallback>:

 void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
//		  ADCValue = HAL_ADC_GetValue(&hadc1);
//	  }
//	  HAL_ADC_Stop(&hadc1);

	// ADCValue = HAL_ADC_GetValue(&hadc1);
	 sprintf(aTxBuffer,"SPI SLAVE DEN CEVAP: SLAVE     ADC :%4d    ", ADCValue);
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4910      	ldr	r1, [pc, #64]	; (80005a8 <HAL_SPI_TxRxCpltCallback+0x50>)
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <HAL_SPI_TxRxCpltCallback+0x54>)
 800056a:	f003 f8a7 	bl	80036bc <siprintf>

	 if(HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 43) != HAL_OK)
 800056e:	232b      	movs	r3, #43	; 0x2b
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000572:	490e      	ldr	r1, [pc, #56]	; (80005ac <HAL_SPI_TxRxCpltCallback+0x54>)
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000576:	f002 f94d 	bl	8002814 <HAL_SPI_TransmitReceive_DMA>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <HAL_SPI_TxRxCpltCallback+0x2c>
	  {
	    Error_Handler();
 8000580:	f000 f836 	bl	80005f0 <Error_Handler>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <HAL_SPI_TxRxCpltCallback+0x60>)
 800058c:	f001 fbde 	bl	8001d4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <HAL_SPI_TxRxCpltCallback+0x64>)
 8000598:	f001 fbd8 	bl	8001d4c <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000b8 	.word	0x200000b8
 80005a8:	08003ef8 	.word	0x08003ef8
 80005ac:	20000000 	.word	0x20000000
 80005b0:	200001d4 	.word	0x200001d4
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	40011000 	.word	0x40011000

080005c0 <HAL_SPI_ErrorCallback>:

 void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <HAL_SPI_ErrorCallback+0x28>)
 80005d0:	f001 fbbc 	bl	8001d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <HAL_SPI_ErrorCallback+0x2c>)
 80005dc:	f001 fbb6 	bl	8001d4c <HAL_GPIO_WritePin>
 }
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	40011000 	.word	0x40011000

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <Error_Handler+0x20>)
 80005fc:	f001 fba6 	bl	8001d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <Error_Handler+0x24>)
 8000608:	f001 fba0 	bl	8001d4c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40011000 	.word	0x40011000

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <HAL_ADC_MspInit+0x7c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d129      	bne.n	80006f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_ADC_MspInit+0x80>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d0:	2303      	movs	r3, #3
 80006d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <HAL_ADC_MspInit+0x84>)
 80006dc:	f001 f9dc 	bl	8001a98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2104      	movs	r1, #4
 80006e4:	2012      	movs	r0, #18
 80006e6:	f000 ff3c 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006ea:	2012      	movs	r0, #18
 80006ec:	f000 ff55 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40012400 	.word	0x40012400
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a47      	ldr	r2, [pc, #284]	; (800083c <HAL_SPI_MspInit+0x138>)
 8000720:	4293      	cmp	r3, r2
 8000722:	f040 8087 	bne.w	8000834 <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000726:	4b46      	ldr	r3, [pc, #280]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a45      	ldr	r2, [pc, #276]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <HAL_SPI_MspInit+0x13c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000756:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	4836      	ldr	r0, [pc, #216]	; (8000844 <HAL_SPI_MspInit+0x140>)
 800076c:	f001 f994 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	482f      	ldr	r0, [pc, #188]	; (8000844 <HAL_SPI_MspInit+0x140>)
 8000786:	f001 f987 	bl	8001a98 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <HAL_SPI_MspInit+0x144>)
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <HAL_SPI_MspInit+0x148>)
 800078e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <HAL_SPI_MspInit+0x144>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <HAL_SPI_MspInit+0x144>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <HAL_SPI_MspInit+0x144>)
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007be:	f000 ff07 	bl	80015d0 <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 80007c8:	f7ff ff12 	bl	80005f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <HAL_SPI_MspInit+0x144>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <HAL_SPI_MspInit+0x150>)
 80007dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 800080a:	f000 fee1 	bl	80015d0 <HAL_DMA_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8000814:	f7ff feec 	bl	80005f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_SPI_MspInit+0x14c>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2102      	movs	r1, #2
 8000828:	2024      	movs	r0, #36	; 0x24
 800082a:	f000 fe9a 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800082e:	2024      	movs	r0, #36	; 0x24
 8000830:	f000 feb3 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40003800 	.word	0x40003800
 8000840:	40021000 	.word	0x40021000
 8000844:	40010c00 	.word	0x40010c00
 8000848:	20000120 	.word	0x20000120
 800084c:	40020044 	.word	0x40020044
 8000850:	20000200 	.word	0x20000200
 8000854:	40020058 	.word	0x40020058

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <HAL_UART_MspInit+0x9c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d139      	bne.n	80008ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <HAL_UART_MspInit+0xa4>)
 80008be:	f001 f8eb 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <HAL_UART_MspInit+0xa4>)
 80008d8:	f001 f8de 	bl	8001a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f000 fe3e 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e6:	2025      	movs	r0, #37	; 0x25
 80008e8:	f000 fe57 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <HardFault_Handler+0x4>

08000912 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <BusFault_Handler+0x4>

0800091e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f900 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DMA1_Channel4_IRQHandler+0x10>)
 800095a:	f000 ff69 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000120 	.word	0x20000120

08000968 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <DMA1_Channel5_IRQHandler+0x10>)
 800096e:	f000 ff5f 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000200 	.word	0x20000200

0800097c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <ADC1_2_IRQHandler+0x10>)
 8000982:	f000 fabd 	bl	8000f00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000164 	.word	0x20000164

08000990 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <SPI2_IRQHandler+0x10>)
 8000996:	f002 f83f 	bl	8002a18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000c8 	.word	0x200000c8

080009a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <USART1_IRQHandler+0x10>)
 80009aa:	f002 fb45 	bl	8003038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000194 	.word	0x20000194

080009b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x50>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x16>
		heap_end = &end;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <_sbrk+0x50>)
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <_sbrk+0x54>)
 80009cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <_sbrk+0x50>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <_sbrk+0x50>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	466a      	mov	r2, sp
 80009de:	4293      	cmp	r3, r2
 80009e0:	d907      	bls.n	80009f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009e2:	f002 fe39 	bl	8003658 <__errno>
 80009e6:	4602      	mov	r2, r0
 80009e8:	230c      	movs	r3, #12
 80009ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	e006      	b.n	8000a00 <_sbrk+0x48>
	}

	heap_end += incr;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <_sbrk+0x50>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <_sbrk+0x50>)
 80009fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000bc 	.word	0x200000bc
 8000a0c:	20000250 	.word	0x20000250

08000a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <SystemInit+0x5c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <SystemInit+0x5c>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <SystemInit+0x5c>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4911      	ldr	r1, [pc, #68]	; (8000a6c <SystemInit+0x5c>)
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SystemInit+0x60>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <SystemInit+0x5c>)
 8000a32:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SystemInit+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SystemInit+0x5c>)
 8000a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SystemInit+0x5c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <SystemInit+0x5c>)
 8000a4e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a52:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SystemInit+0x5c>)
 8000a56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a5a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SystemInit+0x64>)
 8000a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a62:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	f8ff0000 	.word	0xf8ff0000
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a7a:	e003      	b.n	8000a84 <LoopCopyDataInit>

08000a7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a82:	3104      	adds	r1, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a8c:	d3f6      	bcc.n	8000a7c <CopyDataInit>
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a90:	e002      	b.n	8000a98 <LoopFillZerobss>

08000a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a94:	f842 3b04 	str.w	r3, [r2], #4

08000a98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a9c:	d3f9      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9e:	f7ff ffb7 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fddf 	bl	8003664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fb51 	bl	800014c <main>
  bx lr
 8000aaa:	4770      	bx	lr
  ldr r3, =_sidata
 8000aac:	08003f8c 	.word	0x08003f8c
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ab4:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000ab8:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000abc:	2000024c 	.word	0x2000024c

08000ac0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <CAN1_RX1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x28>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fd39 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fd9a 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fd51 	bl	80015b6 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 fd19 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000002c 	.word	0x2000002c
 8000b48:	20000034 	.word	0x20000034
 8000b4c:	20000030 	.word	0x20000030

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000244 	.word	0x20000244

08000b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000244 	.word	0x20000244

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_Delay+0x40>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000034 	.word	0x20000034

08000bcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e0be      	b.n	8000d6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d109      	bne.n	8000c10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fd36 	bl	800067c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fb8b 	bl	800132c <ADC_ConversionStop_Disable>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8099 	bne.w	8000d5a <HAL_ADC_Init+0x18e>
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8095 	bne.w	8000d5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c38:	f023 0302 	bic.w	r3, r3, #2
 8000c3c:	f043 0202 	orr.w	r2, r3, #2
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b1b      	ldrb	r3, [r3, #12]
 8000c52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_Init+0xa2>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d102      	bne.n	8000c74 <HAL_ADC_Init+0xa8>
 8000c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c72:	e000      	b.n	8000c76 <HAL_ADC_Init+0xaa>
 8000c74:	2300      	movs	r3, #0
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7d1b      	ldrb	r3, [r3, #20]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d119      	bne.n	8000cb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7b1b      	ldrb	r3, [r3, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d109      	bne.n	8000ca0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	035a      	lsls	r2, r3, #13
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f043 0220 	orr.w	r2, r3, #32
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	f043 0201 	orr.w	r2, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_ADC_Init+0x1a8>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce8:	d003      	beq.n	8000cf2 <HAL_ADC_Init+0x126>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d104      	bne.n	8000cfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	051b      	lsls	r3, r3, #20
 8000cfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_ADC_Init+0x1ac>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10b      	bne.n	8000d38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	f043 0201 	orr.w	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d36:	e018      	b.n	8000d6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f023 0312 	bic.w	r3, r3, #18
 8000d40:	f043 0210 	orr.w	r2, r3, #16
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d58:	e007      	b.n	8000d6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	f043 0210 	orr.w	r2, r3, #16
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	ffe1f7fd 	.word	0xffe1f7fd
 8000d78:	ff1f0efe 	.word	0xff1f0efe

08000d7c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_Start_IT+0x1a>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e0a0      	b.n	8000ed8 <HAL_ADC_Start_IT+0x15c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 fa72 	bl	8001288 <ADC_Enable>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 808f 	bne.w	8000ece <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a45      	ldr	r2, [pc, #276]	; (8000ee0 <HAL_ADC_Start_IT+0x164>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d105      	bne.n	8000dda <HAL_ADC_Start_IT+0x5e>
 8000dce:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <HAL_ADC_Start_IT+0x168>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d115      	bne.n	8000e06 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d026      	beq.n	8000e42 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e04:	e01d      	b.n	8000e42 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <HAL_ADC_Start_IT+0x168>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d004      	beq.n	8000e26 <HAL_ADC_Start_IT+0xaa>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <HAL_ADC_Start_IT+0x164>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10d      	bne.n	8000e42 <HAL_ADC_Start_IT+0xc6>
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <HAL_ADC_Start_IT+0x168>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	f023 0206 	bic.w	r2, r3, #6
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5a:	e002      	b.n	8000e62 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f06f 0202 	mvn.w	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e92:	d113      	bne.n	8000ebc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_ADC_Start_IT+0x164>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d105      	bne.n	8000eaa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_ADC_Start_IT+0x168>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d108      	bne.n	8000ebc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	e00c      	b.n	8000ed6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	e003      	b.n	8000ed6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40012800 	.word	0x40012800
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d140      	bne.n	8000f98 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d139      	bne.n	8000f98 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f4a:	d11d      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d119      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0220 	bic.w	r2, r2, #32
 8000f62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fad3 	bl	8000534 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f06f 0212 	mvn.w	r2, #18
 8000f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	2b80      	cmp	r3, #128	; 0x80
 8000fa4:	d14f      	bne.n	8001046 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d148      	bne.n	8001046 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d105      	bne.n	8000fcc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000fd6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000fda:	d012      	beq.n	8001002 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d125      	bne.n	8001036 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ff4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ff8:	d11d      	bne.n	8001036 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d119      	bne.n	8001036 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001010:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f9b2 	bl	80013a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f06f 020c 	mvn.w	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b40      	cmp	r3, #64	; 0x40
 8001052:	d114      	bne.n	800107e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10d      	bne.n	800107e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f809 	bl	8001086 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f06f 0201 	mvn.w	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x20>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e0dc      	b.n	8001272 <HAL_ADC_ConfigChannel+0x1da>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d81c      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b05      	subs	r3, #5
 80010da:	221f      	movs	r2, #31
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4019      	ands	r1, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b05      	subs	r3, #5
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001100:	e03c      	b.n	800117c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d81c      	bhi.n	8001144 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b23      	subs	r3, #35	; 0x23
 800111c:	221f      	movs	r2, #31
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	4019      	ands	r1, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b23      	subs	r3, #35	; 0x23
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
 8001142:	e01b      	b.n	800117c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b41      	subs	r3, #65	; 0x41
 8001156:	221f      	movs	r2, #31
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b41      	subs	r3, #65	; 0x41
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d91c      	bls.n	80011be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68d9      	ldr	r1, [r3, #12]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6898      	ldr	r0, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	3b1e      	subs	r3, #30
 80011b0:	fa00 f203 	lsl.w	r2, r0, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	e019      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6919      	ldr	r1, [r3, #16]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	2207      	movs	r2, #7
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d003      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011fe:	2b11      	cmp	r3, #17
 8001200:	d132      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_ADC_ConfigChannel+0x1e4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d125      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d126      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001228:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d11a      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_ConfigChannel+0x1e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_ADC_ConfigChannel+0x1ec>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9a      	lsrs	r2, r3, #18
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001248:	e002      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_ConfigChannel+0x1b2>
 8001256:	e007      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f043 0220 	orr.w	r2, r3, #32
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40012400 	.word	0x40012400
 8001280:	2000002c 	.word	0x2000002c
 8001284:	431bde83 	.word	0x431bde83

08001288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d039      	beq.n	800131a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <ADC_Enable+0x9c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <ADC_Enable+0xa0>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012c4:	e002      	b.n	80012cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012d2:	f7ff fc4f 	bl	8000b74 <HAL_GetTick>
 80012d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012d8:	e018      	b.n	800130c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012da:	f7ff fc4b 	bl	8000b74 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d911      	bls.n	800130c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f043 0210 	orr.w	r2, r3, #16
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e007      	b.n	800131c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d1df      	bne.n	80012da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000002c 	.word	0x2000002c
 8001328:	431bde83 	.word	0x431bde83

0800132c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b01      	cmp	r3, #1
 8001344:	d127      	bne.n	8001396 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001356:	f7ff fc0d 	bl	8000b74 <HAL_GetTick>
 800135a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800135c:	e014      	b.n	8001388 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800135e:	f7ff fc09 	bl	8000b74 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d90d      	bls.n	8001388 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d0e3      	beq.n	800135e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4906      	ldr	r1, [pc, #24]	; (800144c <__NVIC_EnableIRQ+0x34>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff90 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff2d 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff42 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff35 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e043      	b.n	800166e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_DMA_Init+0xa8>)
 80015ee:	4413      	add	r3, r2
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_DMA_Init+0xac>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	009a      	lsls	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_DMA_Init+0xb0>)
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800161a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800161e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_DMA_Start_IT+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e04a      	b.n	800173a <HAL_DMA_Start_IT+0xb6>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d13a      	bne.n	800172c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f9ae 	bl	8001a3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 020e 	orr.w	r2, r2, #14
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e00f      	b.n	800171a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0204 	bic.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 020a 	orr.w	r2, r2, #10
 8001718:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0201 	orr.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e005      	b.n	8001738 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	2b02      	cmp	r3, #2
 8001758:	d005      	beq.n	8001766 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e051      	b.n	800180a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020e 	bic.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_DMA_Abort_IT+0xd0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d029      	beq.n	80017e4 <HAL_DMA_Abort_IT+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DMA_Abort_IT+0xd4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d022      	beq.n	80017e0 <HAL_DMA_Abort_IT+0x9c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_DMA_Abort_IT+0xd8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01a      	beq.n	80017da <HAL_DMA_Abort_IT+0x96>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_DMA_Abort_IT+0xdc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x90>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_DMA_Abort_IT+0xe0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00a      	beq.n	80017ce <HAL_DMA_Abort_IT+0x8a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_DMA_Abort_IT+0xe4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Abort_IT+0x84>
 80017c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017c6:	e00e      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	e00b      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	e008      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	e005      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	e002      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e0:	2310      	movs	r3, #16
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_DMA_Abort_IT+0xe8>)
 80017e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    } 
  }
  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020008 	.word	0x40020008
 8001818:	4002001c 	.word	0x4002001c
 800181c:	40020030 	.word	0x40020030
 8001820:	40020044 	.word	0x40020044
 8001824:	40020058 	.word	0x40020058
 8001828:	4002006c 	.word	0x4002006c
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2204      	movs	r2, #4
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d04f      	beq.n	80018f8 <HAL_DMA_IRQHandler+0xc8>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d04a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0204 	bic.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a66      	ldr	r2, [pc, #408]	; (8001a20 <HAL_DMA_IRQHandler+0x1f0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d029      	beq.n	80018de <HAL_DMA_IRQHandler+0xae>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_DMA_IRQHandler+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d022      	beq.n	80018da <HAL_DMA_IRQHandler+0xaa>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a63      	ldr	r2, [pc, #396]	; (8001a28 <HAL_DMA_IRQHandler+0x1f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01a      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xa4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a62      	ldr	r2, [pc, #392]	; (8001a2c <HAL_DMA_IRQHandler+0x1fc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d012      	beq.n	80018ce <HAL_DMA_IRQHandler+0x9e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <HAL_DMA_IRQHandler+0x200>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x98>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a5f      	ldr	r2, [pc, #380]	; (8001a34 <HAL_DMA_IRQHandler+0x204>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d102      	bne.n	80018c2 <HAL_DMA_IRQHandler+0x92>
 80018bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c0:	e00e      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018c6:	e00b      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018cc:	e008      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d2:	e005      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d8:	e002      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	e000      	b.n	80018e0 <HAL_DMA_IRQHandler+0xb0>
 80018de:	2304      	movs	r3, #4
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_DMA_IRQHandler+0x208>)
 80018e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8094 	beq.w	8001a16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	e08e      	b.n	8001a16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2202      	movs	r2, #2
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d056      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x186>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d051      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020a 	bic.w	r2, r2, #10
 800192e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_DMA_IRQHandler+0x1f0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d029      	beq.n	8001996 <HAL_DMA_IRQHandler+0x166>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a37      	ldr	r2, [pc, #220]	; (8001a24 <HAL_DMA_IRQHandler+0x1f4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d022      	beq.n	8001992 <HAL_DMA_IRQHandler+0x162>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <HAL_DMA_IRQHandler+0x1f8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01a      	beq.n	800198c <HAL_DMA_IRQHandler+0x15c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <HAL_DMA_IRQHandler+0x1fc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d012      	beq.n	8001986 <HAL_DMA_IRQHandler+0x156>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_DMA_IRQHandler+0x200>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00a      	beq.n	8001980 <HAL_DMA_IRQHandler+0x150>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_DMA_IRQHandler+0x204>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d102      	bne.n	800197a <HAL_DMA_IRQHandler+0x14a>
 8001974:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001978:	e00e      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 800197a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197e:	e00b      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 8001980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001984:	e008      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 8001986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198a:	e005      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 800198c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001990:	e002      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 8001992:	2320      	movs	r3, #32
 8001994:	e000      	b.n	8001998 <HAL_DMA_IRQHandler+0x168>
 8001996:	2302      	movs	r3, #2
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <HAL_DMA_IRQHandler+0x208>)
 800199a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d034      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019b4:	e02f      	b.n	8001a16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2208      	movs	r2, #8
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d028      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x1e8>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 020e 	bic.w	r2, r2, #14
 80019de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
    }
  }
  return;
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
}
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020008 	.word	0x40020008
 8001a24:	4002001c 	.word	0x4002001c
 8001a28:	40020030 	.word	0x40020030
 8001a2c:	40020044 	.word	0x40020044
 8001a30:	40020058 	.word	0x40020058
 8001a34:	4002006c 	.word	0x4002006c
 8001a38:	40020000 	.word	0x40020000

08001a3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d108      	bne.n	8001a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a7a:	e007      	b.n	8001a8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b08b      	sub	sp, #44	; 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e127      	b.n	8001cfc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aac:	2201      	movs	r2, #1
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8116 	bne.w	8001cf6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d034      	beq.n	8001b3c <HAL_GPIO_Init+0xa4>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d80d      	bhi.n	8001af2 <HAL_GPIO_Init+0x5a>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x9a>
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d804      	bhi.n	8001ae8 <HAL_GPIO_Init+0x50>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d031      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d01c      	beq.n	8001b20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ae6:	e048      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d043      	beq.n	8001b74 <HAL_GPIO_Init+0xdc>
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d01b      	beq.n	8001b28 <HAL_GPIO_Init+0x90>
          break;
 8001af0:	e043      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af2:	4a89      	ldr	r2, [pc, #548]	; (8001d18 <HAL_GPIO_Init+0x280>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d026      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
 8001af8:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_GPIO_Init+0x280>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d806      	bhi.n	8001b0c <HAL_GPIO_Init+0x74>
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_GPIO_Init+0x284>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d020      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
 8001b04:	4a86      	ldr	r2, [pc, #536]	; (8001d20 <HAL_GPIO_Init+0x288>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01d      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
          break;
 8001b0a:	e036      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b0c:	4a85      	ldr	r2, [pc, #532]	; (8001d24 <HAL_GPIO_Init+0x28c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
 8001b12:	4a85      	ldr	r2, [pc, #532]	; (8001d28 <HAL_GPIO_Init+0x290>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d016      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
 8001b18:	4a84      	ldr	r2, [pc, #528]	; (8001d2c <HAL_GPIO_Init+0x294>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0xae>
          break;
 8001b1e:	e02c      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e028      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e023      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	3308      	adds	r3, #8
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e01e      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	330c      	adds	r3, #12
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e019      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e012      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	611a      	str	r2, [r3, #16]
          break;
 8001b66:	e008      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	615a      	str	r2, [r3, #20]
          break;
 8001b72:	e002      	b.n	8001b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2bff      	cmp	r3, #255	; 0xff
 8001b7e:	d801      	bhi.n	8001b84 <HAL_GPIO_Init+0xec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	e001      	b.n	8001b88 <HAL_GPIO_Init+0xf0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2bff      	cmp	r3, #255	; 0xff
 8001b8e:	d802      	bhi.n	8001b96 <HAL_GPIO_Init+0xfe>
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x104>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	401a      	ands	r2, r3
 8001bae:	6a39      	ldr	r1, [r7, #32]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8096 	beq.w	8001cf6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bca:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_GPIO_Init+0x298>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_GPIO_Init+0x298>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_GPIO_Init+0x298>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be2:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_GPIO_Init+0x29c>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	; (8001d38 <HAL_GPIO_Init+0x2a0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x19e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x19a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_GPIO_Init+0x2a8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x196>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x192>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x1a0>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x1a0>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x1a0>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x1a0>
 8001c36:	2300      	movs	r3, #0
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c48:	493a      	ldr	r1, [pc, #232]	; (8001d34 <HAL_GPIO_Init+0x29c>)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4938      	ldr	r1, [pc, #224]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
 8001c6e:	e006      	b.n	8001c7e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4933      	ldr	r1, [pc, #204]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	492e      	ldr	r1, [pc, #184]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4929      	ldr	r1, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	4924      	ldr	r1, [pc, #144]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	491f      	ldr	r1, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	491a      	ldr	r1, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60cb      	str	r3, [r1, #12]
 8001ce6:	e006      	b.n	8001cf6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4915      	ldr	r1, [pc, #84]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f47f aed0 	bne.w	8001aac <HAL_GPIO_Init+0x14>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	372c      	adds	r7, #44	; 0x2c
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	10120000 	.word	0x10120000
 8001d24:	10310000 	.word	0x10310000
 8001d28:	10320000 	.word	0x10320000
 8001d2c:	10220000 	.word	0x10220000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40011400 	.word	0x40011400
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e26c      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d00c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd8:	4b8f      	ldr	r3, [pc, #572]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d112      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d10b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d168      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e246      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x76>
 8001e14:	4b80      	ldr	r3, [pc, #512]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e02e      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x98>
 8001e2a:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7a      	ldr	r2, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b78      	ldr	r3, [pc, #480]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a77      	ldr	r2, [pc, #476]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0xbc>
 8001e4e:	4b72      	ldr	r3, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a71      	ldr	r2, [pc, #452]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fe74 	bl	8000b74 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7fe fe70 	bl	8000b74 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1fa      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xe4>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe60 	bl	8000b74 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe fe5c 	bl	8000b74 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1e6      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x10c>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1ba      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4939      	ldr	r1, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e03a      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fe15 	bl	8000b74 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7fe fe11 	bl	8000b74 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e19b      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe fdf4 	bl	8000b74 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7fe fdf0 	bl	8000b74 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e17a      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03a      	beq.n	8002030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe fdd4 	bl	8000b74 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7fe fdd0 	bl	8000b74 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e15a      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 fada 	bl	80025a8 <RCC_Delay>
 8001ff4:	e01c      	b.n	8002030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fdba 	bl	8000b74 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe fdb6 	bl	8000b74 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d908      	bls.n	8002024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e140      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	42420000 	.word	0x42420000
 8002020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b9e      	ldr	r3, [pc, #632]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e9      	bne.n	8002004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a6 	beq.w	800218a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b94      	ldr	r3, [pc, #592]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a93      	ldr	r2, [pc, #588]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a8a      	ldr	r2, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7fe fd77 	bl	8000b74 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7fe fd73 	bl	8000b74 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b64      	cmp	r3, #100	; 0x64
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0fd      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x312>
 80020b0:	4b7b      	ldr	r3, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a7a      	ldr	r2, [pc, #488]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e02d      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x334>
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a72      	ldr	r2, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	e01c      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x356>
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a6c      	ldr	r2, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fd27 	bl	8000b74 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fd23 	bl	8000b74 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ab      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCC_OscConfig+0x37e>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe fd11 	bl	8000b74 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe fd0d 	bl	8000b74 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e095      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a47      	ldr	r2, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8081 	beq.w	8002296 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d061      	beq.n	8002264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d146      	bne.n	8002236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fce1 	bl	8000b74 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7fe fcdd 	bl	8000b74 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e067      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	492d      	ldr	r1, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a19      	ldr	r1, [r3, #32]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	430b      	orrs	r3, r1
 8002202:	4927      	ldr	r1, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fcb1 	bl	8000b74 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fcad 	bl	8000b74 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e037      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x46a>
 8002234:	e02f      	b.n	8002296 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fc9a 	bl	8000b74 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fc96 	bl	8000b74 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e020      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x498>
 8002262:	e018      	b.n	8002296 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e013      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420060 	.word	0x42420060

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4965      	ldr	r1, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800232a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d040      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d115      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e073      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4936      	ldr	r1, [pc, #216]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe fbea 	bl	8000b74 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fbe6 	bl	8000b74 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e053      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d210      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4922      	ldr	r1, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4601      	mov	r1, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	fa21 f303 	lsr.w	r3, r1, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1cc>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fb48 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	08003f38 	.word	0x08003f38
 8002478:	2000002c 	.word	0x2000002c
 800247c:	20000030 	.word	0x20000030

08002480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b490      	push	{r4, r7}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002488:	1d3c      	adds	r4, r7, #4
 800248a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x46>
 80024be:	e02d      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024d2:	4413      	add	r3, r2
 80024d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0c5b      	lsrs	r3, r3, #17
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f2:	4413      	add	r3, r2
 80024f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024fe:	fb02 f203 	mul.w	r2, r2, r3
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	e004      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	623b      	str	r3, [r7, #32]
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <HAL_RCC_GetSysClockFreq+0xbc>)
 800251e:	623b      	str	r3, [r7, #32]
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	6a3b      	ldr	r3, [r7, #32]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc90      	pop	{r4, r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	08003f24 	.word	0x08003f24
 8002534:	08003f34 	.word	0x08003f34
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	003d0900 	.word	0x003d0900

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_RCC_GetHCLKFreq+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	2000002c 	.word	0x2000002c

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800255c:	f7ff fff2 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08003f48 	.word	0x08003f48

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002584:	f7ff ffde 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002588:	4601      	mov	r1, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0adb      	lsrs	r3, r3, #11
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08003f48 	.word	0x08003f48

080025a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <RCC_Delay+0x34>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <RCC_Delay+0x38>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a5b      	lsrs	r3, r3, #9
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c4:	bf00      	nop
  }
  while (Delay --);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	60fa      	str	r2, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f9      	bne.n	80025c4 <RCC_Delay+0x1c>
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000002c 	.word	0x2000002c
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d07d      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	61d3      	str	r3, [r2, #28]
 800261c:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d118      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fa96 	bl	8000b74 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fa92 	bl	8000b74 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e06d      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02e      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d027      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002688:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800269e:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d014      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fa61 	bl	8000b74 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fa5d 	bl	8000b74 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e036      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ee      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4917      	ldr	r1, [pc, #92]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a13      	ldr	r2, [pc, #76]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	490b      	ldr	r1, [pc, #44]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4904      	ldr	r1, [pc, #16]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	42420440 	.word	0x42420440

08002750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e053      	b.n	800280a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7fd ffc1 	bl	8000704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002798:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	0c1a      	lsrs	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 0204 	and.w	r2, r2, #4
 80027e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002830:	2302      	movs	r3, #2
 8002832:	e0e3      	b.n	80029fc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002842:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800284a:	7dbb      	ldrb	r3, [r7, #22]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d00d      	beq.n	800286c <HAL_SPI_TransmitReceive_DMA+0x58>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d106      	bne.n	8002866 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002860:	7dbb      	ldrb	r3, [r7, #22]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800286a:	e0c2      	b.n	80029f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002882:	e0b6      	b.n	80029f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b04      	cmp	r3, #4
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2205      	movs	r2, #5
 8002894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	887a      	ldrh	r2, [r7, #2]
 80028ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d108      	bne.n	80028ec <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a49      	ldr	r2, [pc, #292]	; (8002a04 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ea:	e007      	b.n	80028fc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	4a46      	ldr	r2, [pc, #280]	; (8002a0c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002902:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	2200      	movs	r2, #0
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	4619      	mov	r1, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002922:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002924:	f7fe feae 	bl	8001684 <HAL_DMA_Start_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002946:	e054      	b.n	80029f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	2200      	movs	r2, #0
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	2200      	movs	r2, #0
 8002976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4619      	mov	r1, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002990:	f7fe fe78 	bl	8001684 <HAL_DMA_Start_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029b2:	e01e      	b.n	80029f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d007      	beq.n	80029d2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0202 	orr.w	r2, r2, #2
 80029f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08002d49 	.word	0x08002d49
 8002a08:	08002c39 	.word	0x08002c39
 8002a0c:	08002d65 	.word	0x08002d65
 8002a10:	08002cbb 	.word	0x08002cbb
 8002a14:	08002d81 	.word	0x08002d81

08002a18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    return;
 8002a5a:	e0bf      	b.n	8002bdc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_SPI_IRQHandler+0x66>
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	09db      	lsrs	r3, r3, #7
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
    return;
 8002a7c:	e0ae      	b.n	8002bdc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_SPI_IRQHandler+0x80>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a2 	beq.w	8002bdc <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 809b 	beq.w	8002bdc <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d011      	beq.n	8002ae2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	e00b      	b.n	8002afa <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
        return;
 8002af8:	e070      	b.n	8002bdc <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d014      	beq.n	8002b30 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d050      	beq.n	8002bda <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_SPI_IRQHandler+0x14c>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d034      	beq.n	8002bce <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0203 	bic.w	r2, r2, #3
 8002b72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d011      	beq.n	8002ba0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_SPI_IRQHandler+0x1cc>)
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fddb 	bl	8001744 <HAL_DMA_Abort_IT>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d016      	beq.n	8002bd6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <HAL_SPI_IRQHandler+0x1cc>)
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fdc5 	bl	8001744 <HAL_DMA_Abort_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002bcc:	e003      	b.n	8002bd6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fcf6 	bl	80005c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002bd4:	e000      	b.n	8002bd8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002bd6:	bf00      	nop
    return;
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
  }
}
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08002dc1 	.word	0x08002dc1

08002be8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c2c:	b2db      	uxtb	r3, r3
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c46:	f7fd ff95 	bl	8000b74 <HAL_GetTick>
 8002c4a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d029      	beq.n	8002cae <SPI_DMAReceiveCplt+0x76>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0220 	bic.w	r2, r2, #32
 8002c68:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0203 	bic.w	r2, r2, #3
 8002c78:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	2164      	movs	r1, #100	; 0x64
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f91c 	bl	8002ebc <SPI_EndRxTransaction>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <SPI_DMAReceiveCplt+0x76>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7fd fc8a 	bl	80005c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002cac:	e002      	b.n	8002cb4 <SPI_DMAReceiveCplt+0x7c>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff9a 	bl	8002be8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fd ff54 	bl	8000b74 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d02f      	beq.n	8002d3c <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0220 	bic.w	r2, r2, #32
 8002cea:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	2164      	movs	r1, #100	; 0x64
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f935 	bl	8002f60 <SPI_EndRxTxTransaction>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0203 	bic.w	r2, r2, #3
 8002d16:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7fd fc43 	bl	80005c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d3a:	e002      	b.n	8002d42 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7fd fc0b 	bl	8000558 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ff4f 	bl	8002bfa <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ff4a 	bl	8002c0c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0203 	bic.w	r2, r2, #3
 8002d9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7fd fc04 	bl	80005c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7fd fbf0 	bl	80005c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df8:	e04c      	b.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d048      	beq.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e02:	f7fd feb7 	bl	8000b74 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d902      	bls.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13d      	bne.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e30:	d111      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d004      	beq.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d107      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5e:	d10f      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e00f      	b.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d1a3      	bne.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed0:	d111      	bne.n	8002ef6 <SPI_EndRxTransaction+0x3a>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eda:	d004      	beq.n	8002ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d107      	bne.n	8002ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d117      	bne.n	8002f30 <SPI_EndRxTransaction+0x74>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d112      	bne.n	8002f30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2101      	movs	r1, #1
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff ff67 	bl	8002de8 <SPI_WaitFlagStateUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01a      	beq.n	8002f56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e013      	b.n	8002f58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff ff54 	bl	8002de8 <SPI_WaitFlagStateUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e000      	b.n	8002f58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ff36 	bl	8002de8 <SPI_WaitFlagStateUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e000      	b.n	8002f94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e03f      	b.n	800302e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fc48 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa5f 	bl	80034a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_UART_IRQHandler+0x52>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f98d 	bl	80033a2 <UART_Receive_IT>
      return;
 8003088:	e0cc      	b.n	8003224 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80ab 	beq.w	80031e8 <HAL_UART_IRQHandler+0x1b0>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_UART_IRQHandler+0x70>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a0 	beq.w	80031e8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_UART_IRQHandler+0x90>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_UART_IRQHandler+0xb0>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	f043 0202 	orr.w	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_UART_IRQHandler+0xd0>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_UART_IRQHandler+0xf0>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	f043 0208 	orr.w	r2, r3, #8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d078      	beq.n	8003222 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_UART_IRQHandler+0x112>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f92c 	bl	80033a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_UART_IRQHandler+0x13a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d031      	beq.n	80031d6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f877 	bl	8003266 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d023      	beq.n	80031ce <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	2b00      	cmp	r3, #0
 800319c:	d013      	beq.n	80031c6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <HAL_UART_IRQHandler+0x1f4>)
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe faca 	bl	8001744 <HAL_DMA_Abort_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d016      	beq.n	80031e4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c0:	4610      	mov	r0, r2
 80031c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	e00e      	b.n	80031e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f844 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	e00a      	b.n	80031e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f840 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e006      	b.n	80031e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f83c 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80031e2:	e01e      	b.n	8003222 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	bf00      	nop
    return;
 80031e6:	e01c      	b.n	8003222 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_UART_IRQHandler+0x1cc>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f863 	bl	80032c8 <UART_Transmit_IT>
    return;
 8003202:	e00f      	b.n	8003224 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_UART_IRQHandler+0x1ec>
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f8aa 	bl	8003372 <UART_EndTransmit_IT>
    return;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003222:	bf00      	nop
  }
}
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	080032a1 	.word	0x080032a1

08003230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800327c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff ffca 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b21      	cmp	r3, #33	; 0x21
 80032da:	d144      	bne.n	8003366 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d11a      	bne.n	800331c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]
 800330e:	e00e      	b.n	800332e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]
 800331a:	e008      	b.n	800332e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	1c59      	adds	r1, r3, #1
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6211      	str	r1, [r2, #32]
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4619      	mov	r1, r3
 800333c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003350:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff4c 	bl	8003230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b22      	cmp	r3, #34	; 0x22
 80033b4:	d171      	bne.n	800349a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d123      	bne.n	8003408 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ea:	e029      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
 8003406:	e01b      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6858      	ldr	r0, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6291      	str	r1, [r2, #40]	; 0x28
 8003420:	b2c2      	uxtb	r2, r0
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e00c      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	1c58      	adds	r0, r3, #1
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6288      	str	r0, [r1, #40]	; 0x28
 8003438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4619      	mov	r1, r3
 800344e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003450:	2b00      	cmp	r3, #0
 8003452:	d120      	bne.n	8003496 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0220 	bic.w	r2, r2, #32
 8003462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fed8 	bl	8003242 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e002      	b.n	800349c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034de:	f023 030c 	bic.w	r3, r3, #12
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a52      	ldr	r2, [pc, #328]	; (8003650 <UART_SetConfig+0x1ac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d14e      	bne.n	80035aa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7ff f838 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8003510:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <UART_SetConfig+0x1b0>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	0119      	lsls	r1, r3, #4
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f2f3 	udiv	r2, r2, r3
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <UART_SetConfig+0x1b0>)
 800354a:	fba3 0302 	umull	r0, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <UART_SetConfig+0x1b0>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003568:	4419      	add	r1, r3
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009a      	lsls	r2, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <UART_SetConfig+0x1b0>)
 8003582:	fba3 0302 	umull	r0, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2064      	movs	r0, #100	; 0x64
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <UART_SetConfig+0x1b0>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	440a      	add	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80035a8:	e04d      	b.n	8003646 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7fe ffd5 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 80035ae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	4a23      	ldr	r2, [pc, #140]	; (8003654 <UART_SetConfig+0x1b0>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	0119      	lsls	r1, r3, #4
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <UART_SetConfig+0x1b0>)
 80035e8:	fba3 0302 	umull	r0, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2064      	movs	r0, #100	; 0x64
 80035f0:	fb00 f303 	mul.w	r3, r0, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	3332      	adds	r3, #50	; 0x32
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <UART_SetConfig+0x1b0>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003606:	4419      	add	r1, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009a      	lsls	r2, r3, #2
 8003612:	441a      	add	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	fbb2 f2f3 	udiv	r2, r2, r3
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <UART_SetConfig+0x1b0>)
 8003620:	fba3 0302 	umull	r0, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2064      	movs	r0, #100	; 0x64
 8003628:	fb00 f303 	mul.w	r3, r0, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <UART_SetConfig+0x1b0>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	440a      	add	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40013800 	.word	0x40013800
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <__errno>:
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <__errno+0x8>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000038 	.word	0x20000038

08003664 <__libc_init_array>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	2500      	movs	r5, #0
 8003668:	4e0c      	ldr	r6, [pc, #48]	; (800369c <__libc_init_array+0x38>)
 800366a:	4c0d      	ldr	r4, [pc, #52]	; (80036a0 <__libc_init_array+0x3c>)
 800366c:	1ba4      	subs	r4, r4, r6
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	42a5      	cmp	r5, r4
 8003672:	d109      	bne.n	8003688 <__libc_init_array+0x24>
 8003674:	f000 fc34 	bl	8003ee0 <_init>
 8003678:	2500      	movs	r5, #0
 800367a:	4e0a      	ldr	r6, [pc, #40]	; (80036a4 <__libc_init_array+0x40>)
 800367c:	4c0a      	ldr	r4, [pc, #40]	; (80036a8 <__libc_init_array+0x44>)
 800367e:	1ba4      	subs	r4, r4, r6
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	42a5      	cmp	r5, r4
 8003684:	d105      	bne.n	8003692 <__libc_init_array+0x2e>
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800368c:	4798      	blx	r3
 800368e:	3501      	adds	r5, #1
 8003690:	e7ee      	b.n	8003670 <__libc_init_array+0xc>
 8003692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003696:	4798      	blx	r3
 8003698:	3501      	adds	r5, #1
 800369a:	e7f2      	b.n	8003682 <__libc_init_array+0x1e>
 800369c:	08003f84 	.word	0x08003f84
 80036a0:	08003f84 	.word	0x08003f84
 80036a4:	08003f84 	.word	0x08003f84
 80036a8:	08003f88 	.word	0x08003f88

080036ac <memset>:
 80036ac:	4603      	mov	r3, r0
 80036ae:	4402      	add	r2, r0
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d100      	bne.n	80036b6 <memset+0xa>
 80036b4:	4770      	bx	lr
 80036b6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ba:	e7f9      	b.n	80036b0 <memset+0x4>

080036bc <siprintf>:
 80036bc:	b40e      	push	{r1, r2, r3}
 80036be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036c2:	b500      	push	{lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	ab1d      	add	r3, sp, #116	; 0x74
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	9107      	str	r1, [sp, #28]
 80036ce:	9104      	str	r1, [sp, #16]
 80036d0:	4808      	ldr	r0, [pc, #32]	; (80036f4 <siprintf+0x38>)
 80036d2:	4909      	ldr	r1, [pc, #36]	; (80036f8 <siprintf+0x3c>)
 80036d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036d8:	9105      	str	r1, [sp, #20]
 80036da:	6800      	ldr	r0, [r0, #0]
 80036dc:	a902      	add	r1, sp, #8
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	f000 f866 	bl	80037b0 <_svfiprintf_r>
 80036e4:	2200      	movs	r2, #0
 80036e6:	9b02      	ldr	r3, [sp, #8]
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	b01c      	add	sp, #112	; 0x70
 80036ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f0:	b003      	add	sp, #12
 80036f2:	4770      	bx	lr
 80036f4:	20000038 	.word	0x20000038
 80036f8:	ffff0208 	.word	0xffff0208

080036fc <__ssputs_r>:
 80036fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	688e      	ldr	r6, [r1, #8]
 8003702:	4682      	mov	sl, r0
 8003704:	429e      	cmp	r6, r3
 8003706:	460c      	mov	r4, r1
 8003708:	4690      	mov	r8, r2
 800370a:	4699      	mov	r9, r3
 800370c:	d837      	bhi.n	800377e <__ssputs_r+0x82>
 800370e:	898a      	ldrh	r2, [r1, #12]
 8003710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003714:	d031      	beq.n	800377a <__ssputs_r+0x7e>
 8003716:	2302      	movs	r3, #2
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	6909      	ldr	r1, [r1, #16]
 800371c:	1a6f      	subs	r7, r5, r1
 800371e:	6965      	ldr	r5, [r4, #20]
 8003720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003724:	fb95 f5f3 	sdiv	r5, r5, r3
 8003728:	f109 0301 	add.w	r3, r9, #1
 800372c:	443b      	add	r3, r7
 800372e:	429d      	cmp	r5, r3
 8003730:	bf38      	it	cc
 8003732:	461d      	movcc	r5, r3
 8003734:	0553      	lsls	r3, r2, #21
 8003736:	d530      	bpl.n	800379a <__ssputs_r+0x9e>
 8003738:	4629      	mov	r1, r5
 800373a:	f000 fb37 	bl	8003dac <_malloc_r>
 800373e:	4606      	mov	r6, r0
 8003740:	b950      	cbnz	r0, 8003758 <__ssputs_r+0x5c>
 8003742:	230c      	movs	r3, #12
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f8ca 3000 	str.w	r3, [sl]
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003758:	463a      	mov	r2, r7
 800375a:	6921      	ldr	r1, [r4, #16]
 800375c:	f000 fab6 	bl	8003ccc <memcpy>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	6126      	str	r6, [r4, #16]
 800376e:	443e      	add	r6, r7
 8003770:	6026      	str	r6, [r4, #0]
 8003772:	464e      	mov	r6, r9
 8003774:	6165      	str	r5, [r4, #20]
 8003776:	1bed      	subs	r5, r5, r7
 8003778:	60a5      	str	r5, [r4, #8]
 800377a:	454e      	cmp	r6, r9
 800377c:	d900      	bls.n	8003780 <__ssputs_r+0x84>
 800377e:	464e      	mov	r6, r9
 8003780:	4632      	mov	r2, r6
 8003782:	4641      	mov	r1, r8
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	f000 faac 	bl	8003ce2 <memmove>
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	2000      	movs	r0, #0
 800378e:	1b9b      	subs	r3, r3, r6
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	441e      	add	r6, r3
 8003796:	6026      	str	r6, [r4, #0]
 8003798:	e7dc      	b.n	8003754 <__ssputs_r+0x58>
 800379a:	462a      	mov	r2, r5
 800379c:	f000 fb60 	bl	8003e60 <_realloc_r>
 80037a0:	4606      	mov	r6, r0
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d1e2      	bne.n	800376c <__ssputs_r+0x70>
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	4650      	mov	r0, sl
 80037aa:	f000 fab3 	bl	8003d14 <_free_r>
 80037ae:	e7c8      	b.n	8003742 <__ssputs_r+0x46>

080037b0 <_svfiprintf_r>:
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	461d      	mov	r5, r3
 80037b6:	898b      	ldrh	r3, [r1, #12]
 80037b8:	b09d      	sub	sp, #116	; 0x74
 80037ba:	061f      	lsls	r7, r3, #24
 80037bc:	4680      	mov	r8, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	4616      	mov	r6, r2
 80037c2:	d50f      	bpl.n	80037e4 <_svfiprintf_r+0x34>
 80037c4:	690b      	ldr	r3, [r1, #16]
 80037c6:	b96b      	cbnz	r3, 80037e4 <_svfiprintf_r+0x34>
 80037c8:	2140      	movs	r1, #64	; 0x40
 80037ca:	f000 faef 	bl	8003dac <_malloc_r>
 80037ce:	6020      	str	r0, [r4, #0]
 80037d0:	6120      	str	r0, [r4, #16]
 80037d2:	b928      	cbnz	r0, 80037e0 <_svfiprintf_r+0x30>
 80037d4:	230c      	movs	r3, #12
 80037d6:	f8c8 3000 	str.w	r3, [r8]
 80037da:	f04f 30ff 	mov.w	r0, #4294967295
 80037de:	e0c8      	b.n	8003972 <_svfiprintf_r+0x1c2>
 80037e0:	2340      	movs	r3, #64	; 0x40
 80037e2:	6163      	str	r3, [r4, #20]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9309      	str	r3, [sp, #36]	; 0x24
 80037e8:	2320      	movs	r3, #32
 80037ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037ee:	2330      	movs	r3, #48	; 0x30
 80037f0:	f04f 0b01 	mov.w	fp, #1
 80037f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037f8:	9503      	str	r5, [sp, #12]
 80037fa:	4637      	mov	r7, r6
 80037fc:	463d      	mov	r5, r7
 80037fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003802:	b10b      	cbz	r3, 8003808 <_svfiprintf_r+0x58>
 8003804:	2b25      	cmp	r3, #37	; 0x25
 8003806:	d13e      	bne.n	8003886 <_svfiprintf_r+0xd6>
 8003808:	ebb7 0a06 	subs.w	sl, r7, r6
 800380c:	d00b      	beq.n	8003826 <_svfiprintf_r+0x76>
 800380e:	4653      	mov	r3, sl
 8003810:	4632      	mov	r2, r6
 8003812:	4621      	mov	r1, r4
 8003814:	4640      	mov	r0, r8
 8003816:	f7ff ff71 	bl	80036fc <__ssputs_r>
 800381a:	3001      	adds	r0, #1
 800381c:	f000 80a4 	beq.w	8003968 <_svfiprintf_r+0x1b8>
 8003820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003822:	4453      	add	r3, sl
 8003824:	9309      	str	r3, [sp, #36]	; 0x24
 8003826:	783b      	ldrb	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 809d 	beq.w	8003968 <_svfiprintf_r+0x1b8>
 800382e:	2300      	movs	r3, #0
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003838:	9304      	str	r3, [sp, #16]
 800383a:	9307      	str	r3, [sp, #28]
 800383c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003840:	931a      	str	r3, [sp, #104]	; 0x68
 8003842:	462f      	mov	r7, r5
 8003844:	2205      	movs	r2, #5
 8003846:	f817 1b01 	ldrb.w	r1, [r7], #1
 800384a:	4850      	ldr	r0, [pc, #320]	; (800398c <_svfiprintf_r+0x1dc>)
 800384c:	f000 fa30 	bl	8003cb0 <memchr>
 8003850:	9b04      	ldr	r3, [sp, #16]
 8003852:	b9d0      	cbnz	r0, 800388a <_svfiprintf_r+0xda>
 8003854:	06d9      	lsls	r1, r3, #27
 8003856:	bf44      	itt	mi
 8003858:	2220      	movmi	r2, #32
 800385a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800385e:	071a      	lsls	r2, r3, #28
 8003860:	bf44      	itt	mi
 8003862:	222b      	movmi	r2, #43	; 0x2b
 8003864:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003868:	782a      	ldrb	r2, [r5, #0]
 800386a:	2a2a      	cmp	r2, #42	; 0x2a
 800386c:	d015      	beq.n	800389a <_svfiprintf_r+0xea>
 800386e:	462f      	mov	r7, r5
 8003870:	2000      	movs	r0, #0
 8003872:	250a      	movs	r5, #10
 8003874:	9a07      	ldr	r2, [sp, #28]
 8003876:	4639      	mov	r1, r7
 8003878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800387c:	3b30      	subs	r3, #48	; 0x30
 800387e:	2b09      	cmp	r3, #9
 8003880:	d94d      	bls.n	800391e <_svfiprintf_r+0x16e>
 8003882:	b1b8      	cbz	r0, 80038b4 <_svfiprintf_r+0x104>
 8003884:	e00f      	b.n	80038a6 <_svfiprintf_r+0xf6>
 8003886:	462f      	mov	r7, r5
 8003888:	e7b8      	b.n	80037fc <_svfiprintf_r+0x4c>
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <_svfiprintf_r+0x1dc>)
 800388c:	463d      	mov	r5, r7
 800388e:	1a80      	subs	r0, r0, r2
 8003890:	fa0b f000 	lsl.w	r0, fp, r0
 8003894:	4318      	orrs	r0, r3
 8003896:	9004      	str	r0, [sp, #16]
 8003898:	e7d3      	b.n	8003842 <_svfiprintf_r+0x92>
 800389a:	9a03      	ldr	r2, [sp, #12]
 800389c:	1d11      	adds	r1, r2, #4
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	9103      	str	r1, [sp, #12]
 80038a2:	2a00      	cmp	r2, #0
 80038a4:	db01      	blt.n	80038aa <_svfiprintf_r+0xfa>
 80038a6:	9207      	str	r2, [sp, #28]
 80038a8:	e004      	b.n	80038b4 <_svfiprintf_r+0x104>
 80038aa:	4252      	negs	r2, r2
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	9207      	str	r2, [sp, #28]
 80038b2:	9304      	str	r3, [sp, #16]
 80038b4:	783b      	ldrb	r3, [r7, #0]
 80038b6:	2b2e      	cmp	r3, #46	; 0x2e
 80038b8:	d10c      	bne.n	80038d4 <_svfiprintf_r+0x124>
 80038ba:	787b      	ldrb	r3, [r7, #1]
 80038bc:	2b2a      	cmp	r3, #42	; 0x2a
 80038be:	d133      	bne.n	8003928 <_svfiprintf_r+0x178>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	3702      	adds	r7, #2
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	9203      	str	r2, [sp, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bfb8      	it	lt
 80038ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	4d2e      	ldr	r5, [pc, #184]	; (8003990 <_svfiprintf_r+0x1e0>)
 80038d6:	2203      	movs	r2, #3
 80038d8:	7839      	ldrb	r1, [r7, #0]
 80038da:	4628      	mov	r0, r5
 80038dc:	f000 f9e8 	bl	8003cb0 <memchr>
 80038e0:	b138      	cbz	r0, 80038f2 <_svfiprintf_r+0x142>
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	1b40      	subs	r0, r0, r5
 80038e6:	fa03 f000 	lsl.w	r0, r3, r0
 80038ea:	9b04      	ldr	r3, [sp, #16]
 80038ec:	3701      	adds	r7, #1
 80038ee:	4303      	orrs	r3, r0
 80038f0:	9304      	str	r3, [sp, #16]
 80038f2:	7839      	ldrb	r1, [r7, #0]
 80038f4:	2206      	movs	r2, #6
 80038f6:	4827      	ldr	r0, [pc, #156]	; (8003994 <_svfiprintf_r+0x1e4>)
 80038f8:	1c7e      	adds	r6, r7, #1
 80038fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038fe:	f000 f9d7 	bl	8003cb0 <memchr>
 8003902:	2800      	cmp	r0, #0
 8003904:	d038      	beq.n	8003978 <_svfiprintf_r+0x1c8>
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <_svfiprintf_r+0x1e8>)
 8003908:	bb13      	cbnz	r3, 8003950 <_svfiprintf_r+0x1a0>
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	3307      	adds	r3, #7
 800390e:	f023 0307 	bic.w	r3, r3, #7
 8003912:	3308      	adds	r3, #8
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003918:	444b      	add	r3, r9
 800391a:	9309      	str	r3, [sp, #36]	; 0x24
 800391c:	e76d      	b.n	80037fa <_svfiprintf_r+0x4a>
 800391e:	fb05 3202 	mla	r2, r5, r2, r3
 8003922:	2001      	movs	r0, #1
 8003924:	460f      	mov	r7, r1
 8003926:	e7a6      	b.n	8003876 <_svfiprintf_r+0xc6>
 8003928:	2300      	movs	r3, #0
 800392a:	250a      	movs	r5, #10
 800392c:	4619      	mov	r1, r3
 800392e:	3701      	adds	r7, #1
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	4638      	mov	r0, r7
 8003934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003938:	3a30      	subs	r2, #48	; 0x30
 800393a:	2a09      	cmp	r2, #9
 800393c:	d903      	bls.n	8003946 <_svfiprintf_r+0x196>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0c8      	beq.n	80038d4 <_svfiprintf_r+0x124>
 8003942:	9105      	str	r1, [sp, #20]
 8003944:	e7c6      	b.n	80038d4 <_svfiprintf_r+0x124>
 8003946:	fb05 2101 	mla	r1, r5, r1, r2
 800394a:	2301      	movs	r3, #1
 800394c:	4607      	mov	r7, r0
 800394e:	e7f0      	b.n	8003932 <_svfiprintf_r+0x182>
 8003950:	ab03      	add	r3, sp, #12
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4622      	mov	r2, r4
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <_svfiprintf_r+0x1ec>)
 8003958:	a904      	add	r1, sp, #16
 800395a:	4640      	mov	r0, r8
 800395c:	f3af 8000 	nop.w
 8003960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003964:	4681      	mov	r9, r0
 8003966:	d1d6      	bne.n	8003916 <_svfiprintf_r+0x166>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	065b      	lsls	r3, r3, #25
 800396c:	f53f af35 	bmi.w	80037da <_svfiprintf_r+0x2a>
 8003970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003972:	b01d      	add	sp, #116	; 0x74
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	ab03      	add	r3, sp, #12
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4622      	mov	r2, r4
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <_svfiprintf_r+0x1ec>)
 8003980:	a904      	add	r1, sp, #16
 8003982:	4640      	mov	r0, r8
 8003984:	f000 f882 	bl	8003a8c <_printf_i>
 8003988:	e7ea      	b.n	8003960 <_svfiprintf_r+0x1b0>
 800398a:	bf00      	nop
 800398c:	08003f50 	.word	0x08003f50
 8003990:	08003f56 	.word	0x08003f56
 8003994:	08003f5a 	.word	0x08003f5a
 8003998:	00000000 	.word	0x00000000
 800399c:	080036fd 	.word	0x080036fd

080039a0 <_printf_common>:
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	4691      	mov	r9, r2
 80039a6:	461f      	mov	r7, r3
 80039a8:	688a      	ldr	r2, [r1, #8]
 80039aa:	690b      	ldr	r3, [r1, #16]
 80039ac:	4606      	mov	r6, r0
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bfb8      	it	lt
 80039b2:	4613      	movlt	r3, r2
 80039b4:	f8c9 3000 	str.w	r3, [r9]
 80039b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039bc:	460c      	mov	r4, r1
 80039be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039c2:	b112      	cbz	r2, 80039ca <_printf_common+0x2a>
 80039c4:	3301      	adds	r3, #1
 80039c6:	f8c9 3000 	str.w	r3, [r9]
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	0699      	lsls	r1, r3, #26
 80039ce:	bf42      	ittt	mi
 80039d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039d4:	3302      	addmi	r3, #2
 80039d6:	f8c9 3000 	strmi.w	r3, [r9]
 80039da:	6825      	ldr	r5, [r4, #0]
 80039dc:	f015 0506 	ands.w	r5, r5, #6
 80039e0:	d107      	bne.n	80039f2 <_printf_common+0x52>
 80039e2:	f104 0a19 	add.w	sl, r4, #25
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	f8d9 2000 	ldr.w	r2, [r9]
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	42ab      	cmp	r3, r5
 80039f0:	dc29      	bgt.n	8003a46 <_printf_common+0xa6>
 80039f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	3300      	adds	r3, #0
 80039fa:	bf18      	it	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	0692      	lsls	r2, r2, #26
 8003a00:	d42e      	bmi.n	8003a60 <_printf_common+0xc0>
 8003a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d021      	beq.n	8003a54 <_printf_common+0xb4>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	68e5      	ldr	r5, [r4, #12]
 8003a14:	f003 0306 	and.w	r3, r3, #6
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	bf18      	it	ne
 8003a1c:	2500      	movne	r5, #0
 8003a1e:	f8d9 2000 	ldr.w	r2, [r9]
 8003a22:	f04f 0900 	mov.w	r9, #0
 8003a26:	bf08      	it	eq
 8003a28:	1aad      	subeq	r5, r5, r2
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	6922      	ldr	r2, [r4, #16]
 8003a2e:	bf08      	it	eq
 8003a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bfc4      	itt	gt
 8003a38:	1a9b      	subgt	r3, r3, r2
 8003a3a:	18ed      	addgt	r5, r5, r3
 8003a3c:	341a      	adds	r4, #26
 8003a3e:	454d      	cmp	r5, r9
 8003a40:	d11a      	bne.n	8003a78 <_printf_common+0xd8>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e008      	b.n	8003a58 <_printf_common+0xb8>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4652      	mov	r2, sl
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	47c0      	blx	r8
 8003a50:	3001      	adds	r0, #1
 8003a52:	d103      	bne.n	8003a5c <_printf_common+0xbc>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	e7c2      	b.n	80039e6 <_printf_common+0x46>
 8003a60:	2030      	movs	r0, #48	; 0x30
 8003a62:	18e1      	adds	r1, r4, r3
 8003a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a6e:	4422      	add	r2, r4
 8003a70:	3302      	adds	r3, #2
 8003a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a76:	e7c4      	b.n	8003a02 <_printf_common+0x62>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	4630      	mov	r0, r6
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0e6      	beq.n	8003a54 <_printf_common+0xb4>
 8003a86:	f109 0901 	add.w	r9, r9, #1
 8003a8a:	e7d8      	b.n	8003a3e <_printf_common+0x9e>

08003a8c <_printf_i>:
 8003a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a94:	460c      	mov	r4, r1
 8003a96:	7e09      	ldrb	r1, [r1, #24]
 8003a98:	b085      	sub	sp, #20
 8003a9a:	296e      	cmp	r1, #110	; 0x6e
 8003a9c:	4617      	mov	r7, r2
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	4698      	mov	r8, r3
 8003aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003aa4:	f000 80b3 	beq.w	8003c0e <_printf_i+0x182>
 8003aa8:	d822      	bhi.n	8003af0 <_printf_i+0x64>
 8003aaa:	2963      	cmp	r1, #99	; 0x63
 8003aac:	d036      	beq.n	8003b1c <_printf_i+0x90>
 8003aae:	d80a      	bhi.n	8003ac6 <_printf_i+0x3a>
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	f000 80b9 	beq.w	8003c28 <_printf_i+0x19c>
 8003ab6:	2958      	cmp	r1, #88	; 0x58
 8003ab8:	f000 8083 	beq.w	8003bc2 <_printf_i+0x136>
 8003abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ac4:	e032      	b.n	8003b2c <_printf_i+0xa0>
 8003ac6:	2964      	cmp	r1, #100	; 0x64
 8003ac8:	d001      	beq.n	8003ace <_printf_i+0x42>
 8003aca:	2969      	cmp	r1, #105	; 0x69
 8003acc:	d1f6      	bne.n	8003abc <_printf_i+0x30>
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	0605      	lsls	r5, r0, #24
 8003ad4:	f103 0104 	add.w	r1, r3, #4
 8003ad8:	d52a      	bpl.n	8003b30 <_printf_i+0xa4>
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6011      	str	r1, [r2, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da03      	bge.n	8003aea <_printf_i+0x5e>
 8003ae2:	222d      	movs	r2, #45	; 0x2d
 8003ae4:	425b      	negs	r3, r3
 8003ae6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003aea:	486f      	ldr	r0, [pc, #444]	; (8003ca8 <_printf_i+0x21c>)
 8003aec:	220a      	movs	r2, #10
 8003aee:	e039      	b.n	8003b64 <_printf_i+0xd8>
 8003af0:	2973      	cmp	r1, #115	; 0x73
 8003af2:	f000 809d 	beq.w	8003c30 <_printf_i+0x1a4>
 8003af6:	d808      	bhi.n	8003b0a <_printf_i+0x7e>
 8003af8:	296f      	cmp	r1, #111	; 0x6f
 8003afa:	d020      	beq.n	8003b3e <_printf_i+0xb2>
 8003afc:	2970      	cmp	r1, #112	; 0x70
 8003afe:	d1dd      	bne.n	8003abc <_printf_i+0x30>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	e003      	b.n	8003b12 <_printf_i+0x86>
 8003b0a:	2975      	cmp	r1, #117	; 0x75
 8003b0c:	d017      	beq.n	8003b3e <_printf_i+0xb2>
 8003b0e:	2978      	cmp	r1, #120	; 0x78
 8003b10:	d1d4      	bne.n	8003abc <_printf_i+0x30>
 8003b12:	2378      	movs	r3, #120	; 0x78
 8003b14:	4865      	ldr	r0, [pc, #404]	; (8003cac <_printf_i+0x220>)
 8003b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b1a:	e055      	b.n	8003bc8 <_printf_i+0x13c>
 8003b1c:	6813      	ldr	r3, [r2, #0]
 8003b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b22:	1d19      	adds	r1, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6011      	str	r1, [r2, #0]
 8003b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e08c      	b.n	8003c4a <_printf_i+0x1be>
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	bf18      	it	ne
 8003b3a:	b21b      	sxthne	r3, r3
 8003b3c:	e7cf      	b.n	8003ade <_printf_i+0x52>
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	1d18      	adds	r0, r3, #4
 8003b44:	6010      	str	r0, [r2, #0]
 8003b46:	0628      	lsls	r0, r5, #24
 8003b48:	d501      	bpl.n	8003b4e <_printf_i+0xc2>
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	e002      	b.n	8003b54 <_printf_i+0xc8>
 8003b4e:	0668      	lsls	r0, r5, #25
 8003b50:	d5fb      	bpl.n	8003b4a <_printf_i+0xbe>
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	296f      	cmp	r1, #111	; 0x6f
 8003b56:	bf14      	ite	ne
 8003b58:	220a      	movne	r2, #10
 8003b5a:	2208      	moveq	r2, #8
 8003b5c:	4852      	ldr	r0, [pc, #328]	; (8003ca8 <_printf_i+0x21c>)
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b64:	6865      	ldr	r5, [r4, #4]
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	60a5      	str	r5, [r4, #8]
 8003b6a:	f2c0 8095 	blt.w	8003c98 <_printf_i+0x20c>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	f021 0104 	bic.w	r1, r1, #4
 8003b74:	6021      	str	r1, [r4, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d13d      	bne.n	8003bf6 <_printf_i+0x16a>
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	f040 808e 	bne.w	8003c9c <_printf_i+0x210>
 8003b80:	4665      	mov	r5, ip
 8003b82:	2a08      	cmp	r2, #8
 8003b84:	d10b      	bne.n	8003b9e <_printf_i+0x112>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	07db      	lsls	r3, r3, #31
 8003b8a:	d508      	bpl.n	8003b9e <_printf_i+0x112>
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bfde      	ittt	le
 8003b94:	2330      	movle	r3, #48	; 0x30
 8003b96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b9e:	ebac 0305 	sub.w	r3, ip, r5
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	f8cd 8000 	str.w	r8, [sp]
 8003ba8:	463b      	mov	r3, r7
 8003baa:	aa03      	add	r2, sp, #12
 8003bac:	4621      	mov	r1, r4
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f7ff fef6 	bl	80039a0 <_printf_common>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d14d      	bne.n	8003c54 <_printf_i+0x1c8>
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	b005      	add	sp, #20
 8003bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bc2:	4839      	ldr	r0, [pc, #228]	; (8003ca8 <_printf_i+0x21c>)
 8003bc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	6821      	ldr	r1, [r4, #0]
 8003bcc:	1d1d      	adds	r5, r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6015      	str	r5, [r2, #0]
 8003bd2:	060a      	lsls	r2, r1, #24
 8003bd4:	d50b      	bpl.n	8003bee <_printf_i+0x162>
 8003bd6:	07ca      	lsls	r2, r1, #31
 8003bd8:	bf44      	itt	mi
 8003bda:	f041 0120 	orrmi.w	r1, r1, #32
 8003bde:	6021      	strmi	r1, [r4, #0]
 8003be0:	b91b      	cbnz	r3, 8003bea <_printf_i+0x15e>
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	f022 0220 	bic.w	r2, r2, #32
 8003be8:	6022      	str	r2, [r4, #0]
 8003bea:	2210      	movs	r2, #16
 8003bec:	e7b7      	b.n	8003b5e <_printf_i+0xd2>
 8003bee:	064d      	lsls	r5, r1, #25
 8003bf0:	bf48      	it	mi
 8003bf2:	b29b      	uxthmi	r3, r3
 8003bf4:	e7ef      	b.n	8003bd6 <_printf_i+0x14a>
 8003bf6:	4665      	mov	r5, ip
 8003bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bfc:	fb02 3311 	mls	r3, r2, r1, r3
 8003c00:	5cc3      	ldrb	r3, [r0, r3]
 8003c02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c06:	460b      	mov	r3, r1
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	d1f5      	bne.n	8003bf8 <_printf_i+0x16c>
 8003c0c:	e7b9      	b.n	8003b82 <_printf_i+0xf6>
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	6825      	ldr	r5, [r4, #0]
 8003c12:	1d18      	adds	r0, r3, #4
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	6010      	str	r0, [r2, #0]
 8003c18:	0628      	lsls	r0, r5, #24
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	d501      	bpl.n	8003c22 <_printf_i+0x196>
 8003c1e:	6019      	str	r1, [r3, #0]
 8003c20:	e002      	b.n	8003c28 <_printf_i+0x19c>
 8003c22:	066a      	lsls	r2, r5, #25
 8003c24:	d5fb      	bpl.n	8003c1e <_printf_i+0x192>
 8003c26:	8019      	strh	r1, [r3, #0]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4665      	mov	r5, ip
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	e7b9      	b.n	8003ba4 <_printf_i+0x118>
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	1d19      	adds	r1, r3, #4
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	681d      	ldr	r5, [r3, #0]
 8003c38:	6862      	ldr	r2, [r4, #4]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 f837 	bl	8003cb0 <memchr>
 8003c42:	b108      	cbz	r0, 8003c48 <_printf_i+0x1bc>
 8003c44:	1b40      	subs	r0, r0, r5
 8003c46:	6060      	str	r0, [r4, #4]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c52:	e7a7      	b.n	8003ba4 <_printf_i+0x118>
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	462a      	mov	r2, r5
 8003c58:	4639      	mov	r1, r7
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	47c0      	blx	r8
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d0aa      	beq.n	8003bb8 <_printf_i+0x12c>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	079b      	lsls	r3, r3, #30
 8003c66:	d413      	bmi.n	8003c90 <_printf_i+0x204>
 8003c68:	68e0      	ldr	r0, [r4, #12]
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	4298      	cmp	r0, r3
 8003c6e:	bfb8      	it	lt
 8003c70:	4618      	movlt	r0, r3
 8003c72:	e7a3      	b.n	8003bbc <_printf_i+0x130>
 8003c74:	2301      	movs	r3, #1
 8003c76:	464a      	mov	r2, r9
 8003c78:	4639      	mov	r1, r7
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d09a      	beq.n	8003bb8 <_printf_i+0x12c>
 8003c82:	3501      	adds	r5, #1
 8003c84:	68e3      	ldr	r3, [r4, #12]
 8003c86:	9a03      	ldr	r2, [sp, #12]
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	42ab      	cmp	r3, r5
 8003c8c:	dcf2      	bgt.n	8003c74 <_printf_i+0x1e8>
 8003c8e:	e7eb      	b.n	8003c68 <_printf_i+0x1dc>
 8003c90:	2500      	movs	r5, #0
 8003c92:	f104 0919 	add.w	r9, r4, #25
 8003c96:	e7f5      	b.n	8003c84 <_printf_i+0x1f8>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ac      	bne.n	8003bf6 <_printf_i+0x16a>
 8003c9c:	7803      	ldrb	r3, [r0, #0]
 8003c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca6:	e76c      	b.n	8003b82 <_printf_i+0xf6>
 8003ca8:	08003f61 	.word	0x08003f61
 8003cac:	08003f72 	.word	0x08003f72

08003cb0 <memchr>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	b2c9      	uxtb	r1, r1
 8003cb4:	4402      	add	r2, r0
 8003cb6:	4290      	cmp	r0, r2
 8003cb8:	4603      	mov	r3, r0
 8003cba:	d101      	bne.n	8003cc0 <memchr+0x10>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e003      	b.n	8003cc8 <memchr+0x18>
 8003cc0:	781c      	ldrb	r4, [r3, #0]
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	428c      	cmp	r4, r1
 8003cc6:	d1f6      	bne.n	8003cb6 <memchr+0x6>
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd10      	pop	{r4, pc}

08003ccc <memcpy>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	1e43      	subs	r3, r0, #1
 8003cd0:	440a      	add	r2, r1
 8003cd2:	4291      	cmp	r1, r2
 8003cd4:	d100      	bne.n	8003cd8 <memcpy+0xc>
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce0:	e7f7      	b.n	8003cd2 <memcpy+0x6>

08003ce2 <memmove>:
 8003ce2:	4288      	cmp	r0, r1
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	eb01 0302 	add.w	r3, r1, r2
 8003cea:	d807      	bhi.n	8003cfc <memmove+0x1a>
 8003cec:	1e42      	subs	r2, r0, #1
 8003cee:	4299      	cmp	r1, r3
 8003cf0:	d00a      	beq.n	8003d08 <memmove+0x26>
 8003cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003cfa:	e7f8      	b.n	8003cee <memmove+0xc>
 8003cfc:	4283      	cmp	r3, r0
 8003cfe:	d9f5      	bls.n	8003cec <memmove+0xa>
 8003d00:	1881      	adds	r1, r0, r2
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	42d3      	cmn	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memmove+0x28>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d12:	e7f7      	b.n	8003d04 <memmove+0x22>

08003d14 <_free_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4605      	mov	r5, r0
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d043      	beq.n	8003da4 <_free_r+0x90>
 8003d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d20:	1f0c      	subs	r4, r1, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	18e4      	addlt	r4, r4, r3
 8003d28:	f000 f8d0 	bl	8003ecc <__malloc_lock>
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <_free_r+0x94>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	4610      	mov	r0, r2
 8003d32:	b933      	cbnz	r3, 8003d42 <_free_r+0x2e>
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	6014      	str	r4, [r2, #0]
 8003d38:	4628      	mov	r0, r5
 8003d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d3e:	f000 b8c6 	b.w	8003ece <__malloc_unlock>
 8003d42:	42a3      	cmp	r3, r4
 8003d44:	d90b      	bls.n	8003d5e <_free_r+0x4a>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	1862      	adds	r2, r4, r1
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bf01      	itttt	eq
 8003d4e:	681a      	ldreq	r2, [r3, #0]
 8003d50:	685b      	ldreq	r3, [r3, #4]
 8003d52:	1852      	addeq	r2, r2, r1
 8003d54:	6022      	streq	r2, [r4, #0]
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	6004      	str	r4, [r0, #0]
 8003d5a:	e7ed      	b.n	8003d38 <_free_r+0x24>
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	b10a      	cbz	r2, 8003d66 <_free_r+0x52>
 8003d62:	42a2      	cmp	r2, r4
 8003d64:	d9fa      	bls.n	8003d5c <_free_r+0x48>
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	1858      	adds	r0, r3, r1
 8003d6a:	42a0      	cmp	r0, r4
 8003d6c:	d10b      	bne.n	8003d86 <_free_r+0x72>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	4401      	add	r1, r0
 8003d72:	1858      	adds	r0, r3, r1
 8003d74:	4282      	cmp	r2, r0
 8003d76:	6019      	str	r1, [r3, #0]
 8003d78:	d1de      	bne.n	8003d38 <_free_r+0x24>
 8003d7a:	6810      	ldr	r0, [r2, #0]
 8003d7c:	6852      	ldr	r2, [r2, #4]
 8003d7e:	4401      	add	r1, r0
 8003d80:	6019      	str	r1, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e7d8      	b.n	8003d38 <_free_r+0x24>
 8003d86:	d902      	bls.n	8003d8e <_free_r+0x7a>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	e7d4      	b.n	8003d38 <_free_r+0x24>
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1821      	adds	r1, r4, r0
 8003d92:	428a      	cmp	r2, r1
 8003d94:	bf01      	itttt	eq
 8003d96:	6811      	ldreq	r1, [r2, #0]
 8003d98:	6852      	ldreq	r2, [r2, #4]
 8003d9a:	1809      	addeq	r1, r1, r0
 8003d9c:	6021      	streq	r1, [r4, #0]
 8003d9e:	6062      	str	r2, [r4, #4]
 8003da0:	605c      	str	r4, [r3, #4]
 8003da2:	e7c9      	b.n	8003d38 <_free_r+0x24>
 8003da4:	bd38      	pop	{r3, r4, r5, pc}
 8003da6:	bf00      	nop
 8003da8:	200000c0 	.word	0x200000c0

08003dac <_malloc_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	1ccd      	adds	r5, r1, #3
 8003db0:	f025 0503 	bic.w	r5, r5, #3
 8003db4:	3508      	adds	r5, #8
 8003db6:	2d0c      	cmp	r5, #12
 8003db8:	bf38      	it	cc
 8003dba:	250c      	movcc	r5, #12
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	db01      	blt.n	8003dc6 <_malloc_r+0x1a>
 8003dc2:	42a9      	cmp	r1, r5
 8003dc4:	d903      	bls.n	8003dce <_malloc_r+0x22>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	f000 f87d 	bl	8003ecc <__malloc_lock>
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <_malloc_r+0xac>)
 8003dd4:	6814      	ldr	r4, [r2, #0]
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	b991      	cbnz	r1, 8003e00 <_malloc_r+0x54>
 8003dda:	4c20      	ldr	r4, [pc, #128]	; (8003e5c <_malloc_r+0xb0>)
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	b91b      	cbnz	r3, 8003de8 <_malloc_r+0x3c>
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f863 	bl	8003eac <_sbrk_r>
 8003de6:	6020      	str	r0, [r4, #0]
 8003de8:	4629      	mov	r1, r5
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 f85e 	bl	8003eac <_sbrk_r>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d124      	bne.n	8003e3e <_malloc_r+0x92>
 8003df4:	230c      	movs	r3, #12
 8003df6:	4630      	mov	r0, r6
 8003df8:	6033      	str	r3, [r6, #0]
 8003dfa:	f000 f868 	bl	8003ece <__malloc_unlock>
 8003dfe:	e7e4      	b.n	8003dca <_malloc_r+0x1e>
 8003e00:	680b      	ldr	r3, [r1, #0]
 8003e02:	1b5b      	subs	r3, r3, r5
 8003e04:	d418      	bmi.n	8003e38 <_malloc_r+0x8c>
 8003e06:	2b0b      	cmp	r3, #11
 8003e08:	d90f      	bls.n	8003e2a <_malloc_r+0x7e>
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	18cc      	adds	r4, r1, r3
 8003e0e:	50cd      	str	r5, [r1, r3]
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f85c 	bl	8003ece <__malloc_unlock>
 8003e16:	f104 000b 	add.w	r0, r4, #11
 8003e1a:	1d23      	adds	r3, r4, #4
 8003e1c:	f020 0007 	bic.w	r0, r0, #7
 8003e20:	1ac3      	subs	r3, r0, r3
 8003e22:	d0d3      	beq.n	8003dcc <_malloc_r+0x20>
 8003e24:	425a      	negs	r2, r3
 8003e26:	50e2      	str	r2, [r4, r3]
 8003e28:	e7d0      	b.n	8003dcc <_malloc_r+0x20>
 8003e2a:	684b      	ldr	r3, [r1, #4]
 8003e2c:	428c      	cmp	r4, r1
 8003e2e:	bf16      	itet	ne
 8003e30:	6063      	strne	r3, [r4, #4]
 8003e32:	6013      	streq	r3, [r2, #0]
 8003e34:	460c      	movne	r4, r1
 8003e36:	e7eb      	b.n	8003e10 <_malloc_r+0x64>
 8003e38:	460c      	mov	r4, r1
 8003e3a:	6849      	ldr	r1, [r1, #4]
 8003e3c:	e7cc      	b.n	8003dd8 <_malloc_r+0x2c>
 8003e3e:	1cc4      	adds	r4, r0, #3
 8003e40:	f024 0403 	bic.w	r4, r4, #3
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d005      	beq.n	8003e54 <_malloc_r+0xa8>
 8003e48:	1a21      	subs	r1, r4, r0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f000 f82e 	bl	8003eac <_sbrk_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d0cf      	beq.n	8003df4 <_malloc_r+0x48>
 8003e54:	6025      	str	r5, [r4, #0]
 8003e56:	e7db      	b.n	8003e10 <_malloc_r+0x64>
 8003e58:	200000c0 	.word	0x200000c0
 8003e5c:	200000c4 	.word	0x200000c4

08003e60 <_realloc_r>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	4607      	mov	r7, r0
 8003e64:	4614      	mov	r4, r2
 8003e66:	460e      	mov	r6, r1
 8003e68:	b921      	cbnz	r1, 8003e74 <_realloc_r+0x14>
 8003e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e6e:	4611      	mov	r1, r2
 8003e70:	f7ff bf9c 	b.w	8003dac <_malloc_r>
 8003e74:	b922      	cbnz	r2, 8003e80 <_realloc_r+0x20>
 8003e76:	f7ff ff4d 	bl	8003d14 <_free_r>
 8003e7a:	4625      	mov	r5, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e80:	f000 f826 	bl	8003ed0 <_malloc_usable_size_r>
 8003e84:	42a0      	cmp	r0, r4
 8003e86:	d20f      	bcs.n	8003ea8 <_realloc_r+0x48>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ff8e 	bl	8003dac <_malloc_r>
 8003e90:	4605      	mov	r5, r0
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d0f2      	beq.n	8003e7c <_realloc_r+0x1c>
 8003e96:	4631      	mov	r1, r6
 8003e98:	4622      	mov	r2, r4
 8003e9a:	f7ff ff17 	bl	8003ccc <memcpy>
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff ff37 	bl	8003d14 <_free_r>
 8003ea6:	e7e9      	b.n	8003e7c <_realloc_r+0x1c>
 8003ea8:	4635      	mov	r5, r6
 8003eaa:	e7e7      	b.n	8003e7c <_realloc_r+0x1c>

08003eac <_sbrk_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4c05      	ldr	r4, [pc, #20]	; (8003ec8 <_sbrk_r+0x1c>)
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	6023      	str	r3, [r4, #0]
 8003eb8:	f7fc fd7e 	bl	80009b8 <_sbrk>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk_r+0x1a>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_sbrk_r+0x1a>
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20000248 	.word	0x20000248

08003ecc <__malloc_lock>:
 8003ecc:	4770      	bx	lr

08003ece <__malloc_unlock>:
 8003ece:	4770      	bx	lr

08003ed0 <_malloc_usable_size_r>:
 8003ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed4:	1f18      	subs	r0, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfbc      	itt	lt
 8003eda:	580b      	ldrlt	r3, [r1, r0]
 8003edc:	18c0      	addlt	r0, r0, r3
 8003ede:	4770      	bx	lr

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
